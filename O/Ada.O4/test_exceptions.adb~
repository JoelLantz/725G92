-- joela064: Samarbetat med isahe131, Isaac Hedman, samma program
with Ada.Text_IO;         use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

procedure Test_Exceptions is
   
   Length_Error : exception;
   Format_Error : exception;
   Year_Error   : exception;
   Month_Error  : exception;
   Day_Error    : exception;
   
   type Date_Type is
      record
	 Year, Month, Day : Integer;
      end record;
   
   ----------------------------------------------------------------------
   -- Underprogram för att skriva ut meny och hantera menyval          --
   --                                                                  --
   -- Underprogrammet skriver ut de menyval som finns tillgängliga.    --
   -- Användaren får mata in menyval tills denne matat in ett          --
   -- korrekt menyval.                                                 --
   ----------------------------------------------------------------------
   function Menu_Selection return Integer is
      
      N : Integer;
      
   begin
      
      Put_Line("1. Felkontrollerad heltalsinläsning");
      Put_Line("2. Längdkontrollerad stränginläsning");
      Put_Line("3. Felkontrollerad datuminläsning");
      Put_Line("4. Avsluta programmet");
      
      loop
	 Put("Mata in N: ");
	 Get(N);
	 exit when N in 1 .. 4;	 
	 Put_Line("Felaktigt N, mata in igen!");
      end loop;
      
      return N;
   end Menu_Selection;
   
   ----------------------------------------------------------------------
   -- Underprogram för menyval 1: "felhantering av heltalsinmatning"   --
   --                                                                  --
   -- Underprogrammet låter användaren mata in ett intervall angivet   --
   -- med två heltal Min och Max. Get_Safe anropas                     --
   -- sedan med detta intervall och sköter felhanteringen av           --
   -- heltalsinläsningen där användaren får mata in värden tills       --
   -- korrekt värde matas in.                                          --
   ----------------------------------------------------------------------
   procedure Get_Safe(Value : out Integer ; Min, Max : in Integer) is
      
   begin      
      loop
	 begin
	    Put("Mata in värde (");
	    Put(Min, Width => 0);
	    Put(" - ");
	    Put(Max, Width => 0);
	    Put("): ");
	    Get(Value);
	    if Value < Min then
	       Put("För litet värde. ");
	       Skip_Line;
	       
	    elsif Value > Max then
	       Put("För stort värde. ");
	       Skip_Line;
	    end if;
	    
	 exception
	    when Data_Error =>
	       Put("Fel datatyp. ");
	       Skip_Line;
	 end;
	 exit when Value >= Min and Value <= Max;
      end loop;
      
   end Get_Safe;
   
   
   --Get Correct String Del 2
   procedure Get_Correct_String(S : out String) is

      C : Character;
      
   begin      
      loop
	 Get(C);	 
	 if C /= ' ' then
	    S(S'First) := C;
	    for Count in S'First+1..S'Last loop
	       if End_Of_Line then
		  raise Length_Error;
	       else
		  Get(S(Count));
	       end if;
	    end loop;
	    exit;
	 end if;	    
      end loop;
      
   end Get_Correct_String;
   
   --Get och put för Date_Type  
   
   procedure Get(Item : out Date_Type) is
      
      function Check_Leap(Year : in Integer)
			 return Boolean is	 	 
      begin
	 if Year mod 4 = 0 then
	    if Year mod 100 = 0 then
	       if Year mod 400 = 0 then
		  return True;
	       else
		  return False;
	       end if;
	    end if;
	    return True;
	 else 
	    return False;
	 end if;
      end Check_Leap;
      
      
      procedure Check_Year(Year : in Integer) is
      begin
	 if Year < 1532 or Year > 9000 then
	    raise Year_Error;
	 end if;
      end;
      
      
      procedure Check_Month(Month : in Integer) is			 	 
      begin
	 if Month < 1 or Month > 12 then
	    raise Month_Error;
	 end if;
      end;      
      
      procedure Check_Day30(Day : in Integer) is
      begin
	 if Day < 1 or Day > 30 then
	    raise Day_Error;
	 end if;
      end;
      
      procedure Check_Day31(Day : in Integer) is
      begin
	 if Day < 1 or Day > 31 then
	    raise Day_Error;
	 end if;
      end;
      
      procedure Check_Day28(Day : in Integer) is
      begin
	 if Day < 1 or Day > 28 then
	    raise Day_Error;
	 end if;
      end;
      
      procedure Check_LeapDay(Day : in Integer)	is
      begin
	 if Day < 1 or Day > 29 then
	    raise Day_Error;
	 end if;
      end;
      
      function Check_Date(S : in String)
			 return Boolean is
	 
	 Year : Integer := Integer'Value(S(1..4));
	 Month : Integer := Integer'Value(S(6..7));
	 Day : Integer := Integer'Value(S(9..10));
      begin
	 Check_Year(Year);
	 Check_Month(Month);
	 if Check_Leap(Year) then 
	    if Month = 2 then
	       Check_LeapDay(Day);
	    elsif Month = 4 or Month = 6 or Month = 9 or Month = 11 then
	       Check_Day30(Day);
	    else
	       Check_Day31(Day);
	    end if;
	 else
	    if Month = 2 then
	       Check_Day28(Day);
	    elsif Month = 4 or Month = 6 or Month = 9 or Month = 11 then
	       Check_Day30(Day);
	    else
	       Check_Day31(Day);
	    end if;
	 end if;
	 
	 return True;
	 
      end Check_Date;

      --Procedure Get för Date_Type        
      S : String(1..10);
      I : Integer := 0;
   begin
      
      Get_Correct_String(S);
      for Count in S'Range loop
	 if Count = 5 or Count = 8 then
	    if S(Count) /= '-' then
	       raise Format_Error;
	    end if;
	 else
	    if S(Count) not in '0'..'9' then
	       raise Format_Error;
	    end if;
	 end if;

      end loop;
      
      if Check_Date(S) then
	 Item.Year := Integer'Value(S(1..4));
	 Item.Month := Integer'Value(S(6..7));
	 Item.Day := Integer'Value(S(9..10));
      end if;
      
   exception
      when Length_Error =>
	 raise Format_Error; 
	 
   end Get;
   
   procedure Nolla(Item : in Integer) is
      
   begin
      
      if Item < 10 then
	 Put(0, Width => 0);
      end if;
           
   end Nolla;
     
   --PUT DATE_TYPE
   procedure Put(Item : in Date_Type) is
   begin
      Put(Item.Year, Width => 0);
      Put("-");
      Nolla(Item.Month);
      Put(Item.Month);
      Put("-");
      Nolla(Item.Day);
      Put(Item.Day);
      
   end Put;
   
   procedure Upg1 is
      
      Value, Min, Max : Integer;
      
   begin      
      Put("Mata in Min och Max: ");
      Get(Min);
      Get(Max);

      Get_Safe(Value, Min, Max);
      Skip_Line;
      
      Put("Du matade in heltalet ");
      Put(Value, Width => 0);
      Put_Line(".");      
   end Upg1;
   
   ----------------------------------------------------------------------
   -- Underprogram för menyval 2: "felhantering av stränginmatning"    --
   --                                                                  --
   -- Underprogrammet skapar en sträng som är lika lång som parametern --
   -- Length. Underprogrammet skickar denna sträng till                --
   -- Get_Correct_String där felhanteringen av stränginmatningen sker. --
   -- Om användaren matar in en för kort sträng kommer                 --
   -- Get_Correct_String kasta/resa undantag vilket inte ska           --
   -- fångas här utan i huvudprogrammet.                               --
   ----------------------------------------------------------------------
   procedure Upg2(Length : in Integer) is
      
      S : String(1 .. Length);

      
   begin      
      Put("Mata in en sträng med exakt ");
      Put(Length, Width => 0);
      Put(" tecken: ");
      
      Get_Correct_String(S);
      Skip_Line;
      
      Put_Line("Du matade in strängen " & S & ".");      
   end Upg2;
   
   --     ----------------------------------------------------------------------
   --     -- Underprogram för menyval 3: "felhantering av datuminmatning"     --
   --     --                                                                  --
   --     -- Underprogrammet anropar Get som i sin tur kommer läsa in och     -- 
   --     -- kontrollera ett datums format och rimlighet. Om datumet är       --
   --     -- felaktigt kommer Get kasta/resa undantag vilket detta            --
   --     -- underprogram ska fånga, skriva ut felmeddelande för och sedan    --
   --     -- anropa Get igen.                                                 --
   --     ----------------------------------------------------------------------
   
   procedure Upg3_1 is
      
      Date: Date_Type;    
   begin
      Put("Mata in ett datum: ");
      Get(Date);
      Skip_Line;
      
      Put("Du matade in ");
      Put(Date);
      New_Line;
   end Upg3_1;
   
   procedure Upg3 is
      
   begin 
      loop
	 begin
	    Upg3_1;
	    exit;
	    
	 exception
	    when Format_Error => 
	       Put("Felaktigt format! ");
	    when Year_Error =>
	       Put("Felaktigt år! ");
	    when Month_Error => 
	       Put("Felaktig månad! ");
	    when Day_Error => 
	       Put("Felaktig dag! ");
	 end;	 
      end loop;
      
   end Upg3;
   
   --     ----------------------------------------------------------------------
   --     -- Huvudprogram                                                     --
   --     --                                                                  --
   --     -- Huvudprogrammet skriver ut och låter användaren välja val i en   --
   --     -- meny via underprogrammet Menu_Selection. Beroende på vilket      --
   --     -- menyval användaren valt kommer olika underprogram anropas.       --
   --     -- Observera att för menyval 2 kommer användaren få mata in längden -- 
   --     -- av en sträng vilket skickas vidare till underporgrammet Upg2 där --
   --     -- strängen i sig skapas.                                           --
   --     ----------------------------------------------------------------------
   Choice, Length : Integer;
   
begin 
   loop
      Choice := Menu_Selection;
      
      if Choice = 1 then
	 Upg1;
	 
      elsif Choice = 2 then
	 Put("Mata in en stränglängd: ");
	 Get(Length);
	 Skip_Line;
	 
	 Upg2(Length);
	 	 
      elsif Choice = 3 then
	 Upg3;
      else
	 Put_Line("Programmet avslutas.");
	 exit;
      end if;      
   end loop;
      
exception
   when Length_Error =>
      Put_Line("För få inmatade tecken!");
      
end Test_Exceptions;
